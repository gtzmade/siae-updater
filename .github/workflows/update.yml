name: Actualizar informe de licenciaturas

on:
  schedule:
    - cron: "0 12 * * 1"   # Cada lunes a las 12:00 UTC (06:00 CDMX)
  workflow_dispatch: {}

permissions:
  contents: write   # necesario para crear Releases

jobs:
  update-data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # --- Ejecutar scripts principales (tolerante a fallos) ---
      - name: Run scraper (tolerante)
        run: |
          python scraper.py || echo "scraper failed, continuing"

      - name: Clean snapshot (tolerante)
        run: |
          python clean_snapshot.py || echo "clean failed, continuing"

      - name: Diff & update Excel (tolerante)
        run: |
          python diff_and_update.py || echo "diff/update failed, continuing"

      # --- Detectar si hubo cambios ---
      - name: Detectar si hubo cambios
        id: detect
        run: |
          python - << 'PY'
          import os, pandas as pd
          x = "19082025_PE Licenciatura_Informe anual - copia (1).xlsx"
          has_changes = False
          try:
              df = pd.read_excel(x, sheet_name="Cambios_detectados")
              has_changes = df.dropna(how="all").shape[0] > 0
          except Exception:
              has_changes = False
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              fh.write(f"has_changes={str(has_changes).lower()}\n")
          PY

      # --- Preparar Excel SOLO si hay cambios ---
      - name: Prepare Excel asset
        if: steps.detect.outputs.has_changes == 'true'
        id: prep
        shell: bash
        run: |
          SRC="19082025_PE Licenciatura_Informe anual - copia (1).xlsx"
          if [ ! -f "$SRC" ]; then
            echo "No existe $SRC; nada que subir"
            echo "upload=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          TS=$(date -u +%Y%m%d-%H%M%S)
          OUT="PE_licenciatura_${TS}.xlsx"
          cp "$SRC" "$OUT"
          echo "upload=true" >> "$GITHUB_OUTPUT"
          echo "file=${OUT}" >> "$GITHUB_OUTPUT"
          echo "tag=pe-${TS}" >> "$GITHUB_OUTPUT"
          echo "ts=${TS}" >> "$GITHUB_OUTPUT"

      # âœ… Paso de depuraciÃ³n: listar xlsx generados
      - name: Listar archivos para depurar
        if: steps.detect.outputs.has_changes == 'true'
        run: ls -lh *.xlsx || true

      # --- Crear Release SOLO si hay cambios ---
      - name: Create GitHub Release & upload asset
        if: steps.detect.outputs.has_changes == 'true' && steps.prep.outputs.upload == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.prep.outputs.tag }}
          name: "PE Licenciatura â€“ ${{ steps.prep.outputs.ts }}"
          draft: false
          prerelease: false
          files: ${{ steps.prep.outputs.file }}

      # --- Enviar correo SOLO si hay cambios ---
      - name: Enviar correo con Excel adjunto
        if: steps.detect.outputs.has_changes == 'true' && steps.prep.outputs.upload == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "SIAE: Informe actualizado ðŸ“Š (solo si hubo cambios)"
          to: ${{ secrets.TO_EMAIL }}
          from: "${{ secrets.FROM_NAME }} <${{ secrets.SMTP_USERNAME }}>"
          content_type: text/html
          html_body: |
            <p>Hola ðŸ‘‹</p>
            <p>Se detectaron <b>cambios</b> en el catÃ¡logo de planes de estudio.</p>
            <p>Va <b>adjunto</b> el Excel actualizado y tambiÃ©n estÃ¡ disponible pÃºblicamente aquÃ­:</p>
            <p><a href="https://github.com/${{ github.repository }}/releases/latest">ðŸ‘‰ Ver Ãºltima Release</a></p>
            <hr>
            <p>Repo: <code>${{ github.repository }}</code> â€¢ Run #${{ github.run_number }}</p>
          attachments: ${{ steps.prep.outputs.file }}

      # --- Mensaje final cuando NO hay cambios ---
      - name: Sin cambios detectados
        if: steps.detect.outputs.has_changes == 'false'
        run: echo "âœ… No se detectaron cambios en la pÃ¡gina. No se generÃ³ un nuevo Excel ni se enviÃ³ correo."
