name: Actualizar informe de licenciaturas

on:
  schedule:
    - cron: "0 12 * * 1"   # Lunes 12:00 UTC (ajústalo si quieres)
  workflow_dispatch: {}

permissions:
  contents: write   # necesario para crear Releases

jobs:
  update-data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # --- Ejecuta scripts (tolerante a fallos) ---
      - name: Run scraper (tolerante)
        run: |
          python scraper.py || echo "scraper failed, continuing"

      - name: Clean snapshot (tolerante)
        run: |
          python clean_snapshot.py || echo "clean failed, continuing"

      - name: Diff & update Excel (tolerante)
        run: |
          python diff_and_update.py || echo "diff/update failed, continuing"

      # --- Preparar Excel para Release ---
      - name: Prepare Excel asset
        id: prep
        shell: bash
        run: |
          SRC="19082025_PE Licenciatura_Informe anual - copia (1).xlsx"
          if [ ! -f "$SRC" ]; then
            echo "No existe $SRC; nada que subir"
            echo "upload=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          TS=$(date -u +%Y%m%d-%H%M%S)
          OUT="PE_licenciatura_${TS}.xlsx"
          cp "$SRC" "$OUT"
          echo "upload=true" >> "$GITHUB_OUTPUT"
          echo "file=${OUT}" >> "$GITHUB_OUTPUT"
          echo "tag=pe-${TS}" >> "$GITHUB_OUTPUT"
          echo "ts=${TS}" >> "$GITHUB_OUTPUT"

      # --- (Opcional) detectar si hubo cambios para condicionar el mail ---
      - name: Detectar si hubo cambios
        id: detect
        run: |
          python - << 'PY'
          import os, pandas as pd
          x = "19082025_PE Licenciatura_Informe anual - copia (1).xlsx"
          has_changes = False
          try:
              df = pd.read_excel(x, sheet_name="Cambios_detectados")
              has_changes = df.dropna(how="all").shape[0] > 0
          except Exception:
              has_changes = False
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              fh.write(f"has_changes={str(has_changes).lower()}\n")
          PY

      # --- Crear Release y subir el Excel (solo si hay archivo) ---
      - name: Create GitHub Release & upload asset
        if: steps.prep.outputs.upload == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.prep.outputs.tag }}
          name: "PE Licenciatura – ${{ steps.prep.outputs.ts }}"
          draft: false
          prerelease: false
          files: ${{ steps.prep.outputs.file }}

      # --- Enviar correo con el Excel adjunto ---
      - name: 📤 Enviar correo con Excel adjunto
        if: steps.prep.outputs.upload == 'true'
        env:
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          EMAIL_TO:   ${{ secrets.EMAIL_TO }}
          OUT_FILE:   ${{ steps.prep.outputs.file }}   # archivo preparado arriba
        run: |
          python - <<'EOF'
          import os, smtplib
          from email.message import EmailMessage

          sender   = os.environ["EMAIL_USER"]
          password = os.environ["EMAIL_PASS"]
          to       = os.environ["EMAIL_TO"]
          out_file = os.environ["OUT_FILE"]

          subject = "SIAE: Informe actualizado 📊"
          body = (
              "Hola 👋\n\n"
              "Se generó un nuevo informe de planes de estudio.\n"
              "El archivo Excel actualizado va adjunto y también está en la última Release:\n"
              "https://github.com/${{ github.repository }}/releases/latest\n\n"
              "Saludos,\nBot SIAE 🤖"
          )

          msg = EmailMessage()
          msg["From"] = sender
          msg["To"] = to
          msg["Subject"] = subject
          msg.set_content(body)

          if not os.path.exists(out_file):
              print(f"⚠️ No se encontró el archivo para adjuntar: {out_file}")
          else:
              with open(out_file, "rb") as f:
                  msg.add_attachment(
                      f.read(),
                      maintype="application",
                      subtype="vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                      filename=out_file,
                  )
              print(f"Adjuntado: {out_file}")

          with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
              smtp.login(sender, password)
              smtp.send_message(msg)
              print("✅ Correo enviado con éxito.")
          EOF
